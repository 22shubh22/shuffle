#!/usr/bin/python -B
# -*- coding: utf-8 -*-

import wx, random

__author__ = 'Navaneeth. S <navaneeths52@gmail.com>'
__license__ = \
"""
Shuffle is free software; you can redistribute it and/
or modify it under the terms of the GNU General
Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your
 option) any later version.

Shuffle is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even
the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU General
Public License for more details.

You should have received a copy of the GNU General
Public License along with Shuffle; if not, write to the
Free Software Foundation, Inc., 51 Franklin Street,
Fifth Floor, Boston, MA  02110-1301  USA
"""

class Panel(wx.Panel):
    def __init__(self, parent):
        super(Panel, self).__init__(parent)

        self.parent = parent
        self.colours = ['#FFFFFF', '#1F3250']
        self.blocks = []
        self.LoadBlocks(25)
        self.RefreshStatus()

    def RefreshStatus(self):
        self.moves = 0
        self.parent.statusbar.SetStatusText('Moves : %s' % (self.moves))

    def LoadBlocks(self, blocks):
        self.data = []

        for a in range(blocks):
            self.data.append(random.randint(0, 1))

        grid = wx.FlexGridSizer(5, 5)

        for n in range(0, blocks, 1):
            block = wx.Panel(self, size=(75, 75), id=n+1, style=wx.SUNKEN_BORDER)
            block.Bind(wx.EVT_LEFT_DOWN, self.ShufflePairs)
            grid.Add(block)

            self.blocks.append(block)

        self.SetSizer(grid)
        grid.Fit(self)
        self.ColourBlocks(self.data)

    def ColourBlocks(self, data):
        for n in range(0, len(self.blocks), 1):
            if data[n] == 0:
                self.blocks[n].SetBackgroundColour(self.colours[1])

            else:
                self.blocks[n].SetBackgroundColour(self.colours[0])

    def Shuffle(self, Obj):
        if Obj.GetBackgroundColour() == self.colours[0]:
            Obj.SetBackgroundColour(self.colours[1])

        else:
            Obj.SetBackgroundColour(self.colours[0])

    def CheckForResult(self):
        blocks = []
        for block in self.blocks:
            if block.GetBackgroundColour() == self.colours[0]:
                blocks.append(block)

        if len(blocks) == len(self.blocks):
            dlg = wx.MessageDialog(self, 'You\'ve successfully won the game.', 'Great work', wx.OK)
            dlg.ShowModal()

            self.parent.statusbar.SetStatusText('GAME OVER')

            for block in self.blocks:
                block.Enable(False)

    def ShufflePairs(self, event):
        object = event.GetEventObject()

        pairs = [[0, 1, 5],
                 [1, 0, 2, 6],
                 [2, 1, 3, 7],
                 [3, 2, 4, 8],
                 [4, 3, 9],
                 [5, 0, 10, 6],
                 [6, 1, 5, 7, 11],
                 [7, 2, 6, 8, 12],
                 [8, 3, 7, 9, 13],
                 [9, 8, 4, 14],
                 [10, 11, 5, 15],
                 [11, 10, 6, 16, 12],
                 [12, 11, 7, 17, 13],
                 [13, 12, 8, 18, 14],
                 [14, 13, 9, 19],
                 [15, 10, 16, 20],
                 [16, 15, 11, 17, 21],
                 [17, 16, 12, 18, 22],
                 [18, 13, 23, 17, 19],
                 [19, 14, 18, 24],
                 [20, 15, 21],
                 [21, 16, 20, 22],
                 [22, 17, 21, 23],
                 [23, 22, 18, 24],
                 [24, 23, 19]]

        for n in range(0, len(pairs), 1):
            if object is self.blocks[n]:
                self.moves = int(self.moves)+1
                self.parent.statusbar.SetStatusText('Moves : %s' % (self.moves))

                for block in pairs[n]:
                    self.Shuffle(self.blocks[block])

                self.CheckForResult()

class MenuBar(wx.MenuBar):
    def __init__(self, parent):
        super(MenuBar, self).__init__()

        gamemnu = wx.Menu()
        helpmnu = wx.Menu()

        gamemnu.AppendItem(wx.MenuItem(gamemnu, 101, 'New\tCtrl+N', 'New game', wx.ITEM_NORMAL))
        gamemnu.AppendItem(wx.MenuItem(gamemnu, 102, 'Restart\tCtrl+R', 'Restart the game', wx.ITEM_NORMAL))
        gamemnu.AppendSeparator()
        gamemnu.AppendItem(wx.MenuItem(gamemnu, 103, 'Close\tCtrl+C', 'Close the game', wx.ITEM_NORMAL))
        helpmnu.AppendItem(wx.MenuItem(helpmnu, 104, 'About\tCtrl+A', 'About the game', wx.ITEM_NORMAL))

        self.Append(gamemnu, 'Game')
        self.Append(helpmnu, 'Help')

        events = [parent.NewGame, parent.Restart, parent.Exit, parent.About]

        for c in range(0, len(events), 1):
            parent.Bind(wx.EVT_MENU, events[c], id=c+101)

class Frame(wx.Frame):
    def __init__(self, parent=None):
        super(Frame, self).__init__(parent,
                                    title='Shuffle',
                                    size=(375, 420),
                                    style=wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.CAPTION)

        self.SetMenuBar(MenuBar(self))
        self.statusbar = self.CreateStatusBar(1, 0)
        self.pane1 = Panel(self)
        self.pane2 = Panel(self)
        self.timer = wx.Timer(self, 1)
        self.count = 0
        self.range = self.pane1.GetSize()[1]-self.pane1.GetSize()[1]-self.pane1.GetSize()[1]
        self.next = self.pane2
        self.prev = self.pane1

        hbox = wx.BoxSizer()
        hbox.Add(self.pane1)
        hbox.Add(self.pane2)
        self.SetSizer(hbox)

        self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)

    def OnTimer(self, event):
        self.count = int(self.count) - 15
        self.prev.SetPosition((int(self.count), self.pane1.GetPosition()[1]))
        self.next.SetPosition((375+int(self.count), self.pane2.GetPosition()[1]))

        if self.count == self.range:
            self.timer.Stop()
            self.count = 0
            prev = self.prev
            next = self.next
            self.prev = next
            self.next = prev

    def NewGame(self, event):
        if self.count <= self.range:
            return

        self.timer.Start(20)
        self.next.RefreshStatus()
        self.next.data = []

        for a in range(len(self.next.blocks)):
            self.next.data.append(random.randint(0, 1))

        self.next.ColourBlocks(self.next.data)

    def Restart(self, event):
        self.prev.RefreshStatus()
        self.prev.ColourBlocks(self.prev.data)

    def Exit(self, event):
        self.Close()

    def About(self, event):
        dlg = wx.AboutDialogInfo()
        dlg.SetName('Shuffle')
        dlg.SetIcon(wx.Icon('/usr/share/icons/shuffle/192x192.png', wx.BITMAP_TYPE_PNG))
        dlg.SetVersion('1.0')
        dlg.SetDescription('A simple game with colour blocks')
        dlg.SetCopyright('Copyright Â© 2013 Navaneeth. S')
        dlg.SetLicence(__license__[1:])

        for Set in [dlg.AddDeveloper, dlg.AddDocWriter, dlg.AddArtist, dlg.AddTranslator]:
            Set(__author__)

        wx.AboutBox(dlg)

if __name__=='__main__':
    app = wx.App()
    Frame().Show()
    app.MainLoop()
